<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/BTMC.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BTMC.py" />
              <option name="originalContent" value="import re&#10;import requests&#10;import json&#10;import os&#10;import logging&#10;from bs4 import BeautifulSoup&#10;from datetime import datetime, timedelta&#10;from requests.adapters import HTTPAdapter&#10;from urllib3.util.retry import Retry&#10;from flask import Flask, render_template_string&#10;from apscheduler.schedulers.background import BackgroundScheduler&#10;from apscheduler.triggers.cron import CronTrigger&#10;&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('gold_crawler')&#10;&#10;# Biến toàn cục để lưu trữ dữ liệu giá vàng mới nhất&#10;current_gold_data = []&#10;HISTORY_FILE = &quot;btmc_history.json&quot;&#10;HISTORY_DAYS = 7&#10;&#10;# Khai báo class GoldPriceScheduler để quản lý việc lên lịch tự động&#10;class GoldPriceScheduler:&#10;    def __init__(self, crawl_function, update_function):&#10;        self.scheduler = BackgroundScheduler()&#10;        self.crawl_function = crawl_function&#10;        self.update_function = update_function&#10;        self.running = False&#10;&#10;    def start(self):&#10;        if not self.running:&#10;            # Lên lịch chạy hàng ngày vào các thời điểm: 8h sáng, 12h trưa, 16h chiều, 20h tối&#10;            self.scheduler.add_job(&#10;                self._fetch_and_update_data,&#10;                CronTrigger(hour='8,12,16,20'),&#10;                id='fetch_gold_price_scheduled',&#10;                name='Tự động cào dữ liệu giá vàng theo lịch'&#10;            )&#10;&#10;            # Thêm job chạy ngay khi khởi động ứng dụng&#10;            self.scheduler.add_job(&#10;                self._fetch_and_update_data,&#10;                id='fetch_gold_price_startup',&#10;                name='Cào dữ liệu giá vàng khi khởi động'&#10;            )&#10;&#10;            self.scheduler.start()&#10;            self.running = True&#10;            logger.info(&quot;Scheduler đã được khởi động thành công&quot;)&#10;&#10;    def stop(self):&#10;        if self.running:&#10;            self.scheduler.shutdown()&#10;            self.running = False&#10;            logger.info(&quot;Scheduler đã dừng&quot;)&#10;&#10;    def _fetch_and_update_data(self):&#10;        try:&#10;            logger.info(&quot;Bắt đầu cào dữ liệu giá vàng...&quot;)&#10;            global current_gold_data&#10;            data = self.crawl_function()&#10;            current_gold_data = data&#10;            self.update_function(data)&#10;            logger.info(f&quot;Đã cập nhật thành công dữ liệu giá vàng. Số bản ghi: {len(data)}&quot;)&#10;        except Exception as e:&#10;            logger.error(f&quot;Lỗi khi cập nhật dữ liệu giá vàng: {str(e)}&quot;)&#10;&#10;def make_session(retries=3, backoff_factor=0.3, status_forcelist=(500,502,504)):&#10;    s = requests.Session()&#10;    retry = Retry(total=retries, backoff_factor=backoff_factor,&#10;                  status_forcelist=status_forcelist,&#10;                  allowed_methods=frozenset(['GET','POST']))&#10;    adapter = HTTPAdapter(max_retries=retry)&#10;    s.mount(&quot;https://&quot;, adapter)&#10;    s.mount(&quot;http://&quot;, adapter)&#10;    return s&#10;&#10;def parse_price_from_text(text):&#10;    if not text:&#10;        return None&#10;    m = re.search(r'[\d\.]+', text)&#10;    if not m:&#10;        return None&#10;    s = m.group(0).replace('.', '')   # &quot;133.100&quot; -&gt; &quot;133100&quot;&#10;    try:&#10;        return float(s) * 1000&#10;    except:&#10;        return None&#10;&#10;def crawl_btmc(debug=False):&#10;    url = &quot;https://giavang.org/trong-nuoc/bao-tin-minh-chau/&quot;&#10;    headers = {&#10;        &quot;User-Agent&quot;: (&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &quot;&#10;                       &quot;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0 Safari/537.36&quot;)&#10;    }&#10;&#10;    sess = make_session()&#10;    resp = sess.get(url, headers=headers, timeout=15)&#10;    resp.raise_for_status()&#10;    soup = BeautifulSoup(resp.text, &quot;html.parser&quot;)&#10;&#10;    results = []&#10;&#10;    boxes = soup.select(&quot;div.gold-price-box&quot;)&#10;&#10;    for bi, box in enumerate(boxes, start=1):&#10;        rows = box.select(&quot;div.row&quot;)&#10;        for ri, row in enumerate(rows, start=1):&#10;            if ri == 1:&#10;                gold_type = &quot;Giá vàng Miếng&quot;&#10;            else:&#10;                gold_type = &quot;Giá vàng Nhẫn&quot;&#10;&#10;            cols = row.select(&quot;div.col-6&quot;)&#10;            if len(cols) &lt; 1:&#10;                continue&#10;&#10;            buy_price = None&#10;            sell_price = None&#10;&#10;            for ci, col in enumerate(cols, start=1):&#10;                label_tag = col.select_one(&quot;span.gold-price-label&quot;)&#10;                price_tag = col.select_one(&quot;span.gold-price&quot;)&#10;&#10;                label_text = label_tag.get_text(strip=True) if label_tag else f&quot;col_{ci}&quot;&#10;                raw_price_text = price_tag.get_text(&quot; &quot;, strip=True) if price_tag else &quot;&quot;&#10;                parsed_price = parse_price_from_text(raw_price_text)&#10;&#10;                ulabel = label_text.upper()&#10;                if &quot;MUA&quot; in ulabel:&#10;                    buy_price = parsed_price&#10;                elif &quot;BÁN&quot; in ulabel or &quot;BAN&quot; in ulabel:&#10;                    sell_price = parsed_price&#10;                else:&#10;                    if ci == 1:&#10;                        buy_price = parsed_price&#10;                    elif ci == 2:&#10;                        sell_price = parsed_price&#10;&#10;            if buy_price is not None or sell_price is not None:&#10;                now = datetime.now()&#10;                formatted_time = now.strftime(&quot;%d/%m/%Y %H:%M:%S&quot;)&#10;                record = {&#10;                    &quot;dealer&quot;: &quot;BTMC&quot;,&#10;                    &quot;type&quot;: gold_type,&#10;                    &quot;time&quot;: formatted_time,&#10;                    &quot;timestamp&quot;: now.timestamp(),&#10;                    &quot;Mua vào&quot;: buy_price,&#10;                    &quot;Bán ra&quot;: sell_price&#10;                }&#10;                results.append(record)&#10;&#10;    return results&#10;&#10;def load_history():&#10;    if not os.path.exists(HISTORY_FILE):&#10;        return []&#10;    with open(HISTORY_FILE, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#10;        try:&#10;            history = json.load(f)&#10;        except Exception:&#10;            history = []&#10;    cutoff = datetime.now() - timedelta(days=HISTORY_DAYS)&#10;    filtered = [item for item in history if item.get(&quot;timestamp&quot;, 0) &gt;= cutoff.timestamp()]&#10;    return filtered&#10;&#10;def save_history(history):&#10;    with open(HISTORY_FILE, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#10;        json.dump(history, f, ensure_ascii=False, indent=2)&#10;&#10;def update_history(new_data):&#10;    history = load_history()&#10;    for item in new_data:&#10;        similar = [h for h in history if h[&quot;type&quot;] == item[&quot;type&quot;]]&#10;        if not similar or abs(item[&quot;timestamp&quot;] - similar[-1][&quot;timestamp&quot;]) &gt; 60:&#10;            history.append(item)&#10;    cutoff = datetime.now() - timedelta(days=HISTORY_DAYS)&#10;    history = [item for item in history if item.get(&quot;timestamp&quot;, 0) &gt;= cutoff.timestamp()]&#10;    save_history(history)&#10;    return history&#10;&#10;def get_price_trend(current, history, key):&#10;    prev = None&#10;    for item in reversed(history):&#10;        if item[&quot;type&quot;] == current[&quot;type&quot;] and item != current:&#10;            prev = item&#10;            break&#10;    if prev is None or prev[key] is None or current[key] is None:&#10;        return {&quot;symbol&quot;: &quot;▬&quot;, &quot;percent&quot;: 0}&#10;&#10;    if current[key] &gt; prev[key]:&#10;        percent = ((current[key] - prev[key]) / prev[key]) * 100&#10;        return {&quot;symbol&quot;: &quot;▲&quot;, &quot;percent&quot;: round(percent, 2)}&#10;    elif current[key] &lt; prev[key]:&#10;        percent = ((prev[key] - current[key]) / prev[key]) * 100&#10;        return {&quot;symbol&quot;: &quot;▼&quot;, &quot;percent&quot;: round(percent, 2)}&#10;    else:&#10;        return {&quot;symbol&quot;: &quot;▬&quot;, &quot;percent&quot;: 0}&#10;&#10;app = Flask(__name__, static_url_path='/static')&#10;&#10;HTML_TEMPLATE = &quot;&quot;&quot;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Giá vàng Bảo Tín Minh Châu&lt;/title&gt;&#10;    &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='styles.css') }}&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;navbar&quot;&gt;&#10;        &lt;h1&gt;Giá vàng Bảo Tín Minh Châu&lt;/h1&gt;&#10;        &lt;div class=&quot;nav-actions&quot;&gt;&#10;            &lt;span id=&quot;status&quot; class=&quot;status&quot;&gt;Dữ liệu đã cập nhật&lt;/span&gt;&#10;            &lt;button id=&quot;refresh&quot; class=&quot;refresh&quot; onclick=&quot;refreshData()&quot;&gt;&#10;                &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;16&quot; height=&quot;16&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#10;                    &lt;path d=&quot;M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z&quot;/&gt;&#10;                    &lt;path d=&quot;M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z&quot;/&gt;&#10;                &lt;/svg&gt;&#10;                Làm mới&#10;            &lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;card&quot;&gt;&#10;            &lt;div class=&quot;card-header&quot;&gt;&#10;                &lt;h2&gt;Bảng giá vàng hiện tại&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;table&gt;&#10;                    &lt;thead&gt;&#10;                        &lt;tr&gt;&#10;                            &lt;th style=&quot;width: 40%; text-align: left;&quot;&gt;Loại vàng&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 25%; text-align: right;&quot; class=&quot;price-header&quot;&gt;Mua vào&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 25%; text-align: right;&quot; class=&quot;price-header&quot;&gt;Bán ra&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 10%; text-align: center;&quot;&gt;Thời gian&lt;/th&gt;&#10;                        &lt;/tr&gt;&#10;                    &lt;/thead&gt;&#10;                    &lt;tbody&gt;&#10;                        {% for item in data %}&#10;                        &lt;tr&gt;&#10;                            &lt;td style=&quot;text-align: left;&quot;&gt;&#10;                                &lt;div class=&quot;gold-type&quot;&gt;&#10;                                    {% if item['type'] == &quot;Giá vàng Miếng&quot; %}&#10;                                    &lt;svg class=&quot;gold-icon&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot;&gt;&#10;                                        &lt;path d=&quot;M12 4L4 8l8 4 8-4-8-4z&quot; fill=&quot;#E6A817&quot;/&gt;&#10;                                        &lt;path d=&quot;M4 12l8 4 8-4M4 16l8 4 8-4&quot; fill=&quot;#E6A817&quot;/&gt;&#10;                                    &lt;/svg&gt;&#10;                                    &lt;span class=&quot;gold-bar&quot;&gt;{{ item['type'] }}&lt;/span&gt;&#10;                                    {% else %}&#10;                                    &lt;svg class=&quot;gold-icon&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot;&gt;&#10;                                        &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;8&quot; fill=&quot;none&quot; stroke=&quot;#9C6644&quot; stroke-width=&quot;2&quot;/&gt;&#10;                                        &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;4&quot; fill=&quot;#9C6644&quot;/&gt;&#10;                                    &lt;/svg&gt;&#10;                                    &lt;span class=&quot;gold-ring&quot;&gt;{{ item['type'] }}&lt;/span&gt;&#10;                                    {% endif %}&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;price&quot; style=&quot;text-align: right;&quot;&gt;&#10;                                &lt;div class=&quot;price-value&quot;&gt;{{ &quot;{:,.0f}&quot;.format(item['Mua vào']) if item['Mua vào'] else &quot;N/A&quot; }}&lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;price&quot; style=&quot;text-align: right;&quot;&gt;&#10;                                &lt;div class=&quot;price-value&quot;&gt;{{ &quot;{:,.0f}&quot;.format(item['Bán ra']) if item['Bán ra'] else &quot;N/A&quot; }}&lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td style=&quot;text-align: center;&quot;&gt;{{ item['time'].split(' ')[1] }}&lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        {% endfor %}&#10;                    &lt;/tbody&gt;&#10;                &lt;/table&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;p class=&quot;timestamp&quot;&gt;Cập nhật lần cuối: {{ data[0]['time'] if data else &quot;N/A&quot; }}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        function refreshData() {&#10;            document.getElementById('status').textContent = 'Đang cập nhật...';&#10;            fetch(window.location.href)&#10;                .then(response =&gt; response.text())&#10;                .then(html =&gt; {&#10;                    const parser = new DOMParser();&#10;                    const newDoc = parser.parseFromString(html, 'text/html');&#10;&#10;                    document.querySelector('.container').innerHTML = newDoc.querySelector('.container').innerHTML;&#10;                    document.getElementById('status').textContent = 'Dữ liệu đã cập nhật';&#10;&#10;                    // Highlight new data&#10;                    document.querySelectorAll('tr').forEach(row =&gt; {&#10;                        row.classList.add('highlight');&#10;                    });&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Error:', error);&#10;                    document.getElementById('status').textContent = 'Lỗi khi cập nhật';&#10;                });&#10;        }&#10;    &lt;/script&gt;&#10;&#10;    &lt;footer&gt;&#10;        &lt;p&gt;&amp;copy; 2025 website được code bởi Newbie và được dùng chỉ cho mục đích cá nhân vui lòng không thương mại hoá&lt;/a&gt;&lt;/p&gt;&#10;    &lt;/footer&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;&quot;&quot;&quot;&#10;&#10;@app.route('/')&#10;def index():&#10;    try:&#10;        # Sử dụng biến toàn cục hoặc lấy dữ liệu mới&#10;        global current_gold_data&#10;        data = current_gold_data&#10;&#10;        # Nếu chưa có dữ liệu (lần đầu chạy), thì thực hiện cào dữ liệu&#10;        if not data:&#10;            data = crawl_btmc()&#10;            current_gold_data = data&#10;&#10;        return render_template_string(HTML_TEMPLATE, data=data)&#10;    except Exception as e:&#10;        logger.error(f&quot;Lỗi khi hiển thị trang: {str(e)}&quot;)&#10;        return f&quot;Lỗi: {str(e)}&quot;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    # Khởi tạo và bắt đầu scheduler&#10;    scheduler = GoldPriceScheduler(crawl_btmc, update_history)&#10;    scheduler.start()&#10;&#10;    try:&#10;        app.run(debug=True)&#10;    finally:&#10;        # Dừng scheduler khi tắt ứng dụng&#10;        scheduler.stop()&#10;" />
              <option name="updatedContent" value="import re&#10;import requests&#10;import json&#10;import os&#10;import logging&#10;from bs4 import BeautifulSoup&#10;from datetime import datetime, timedelta&#10;from requests.adapters import HTTPAdapter&#10;from urllib3.util.retry import Retry&#10;from flask import Flask, render_template_string&#10;from apscheduler.schedulers.background import BackgroundScheduler&#10;from apscheduler.triggers.cron import CronTrigger&#10;&#10;logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')&#10;logger = logging.getLogger('gold_crawler')&#10;&#10;# Biến toàn cục để lưu trữ dữ liệu giá vàng mới nhất&#10;current_gold_data = []&#10;HISTORY_FILE = &quot;btmc_history.json&quot;&#10;HISTORY_DAYS = 7&#10;&#10;# Khai báo class GoldPriceScheduler để quản lý việc lên lịch tự động&#10;class GoldPriceScheduler:&#10;    def __init__(self, crawl_function, update_function):&#10;        self.scheduler = BackgroundScheduler()&#10;        self.crawl_function = crawl_function&#10;        self.update_function = update_function&#10;        self.running = False&#10;&#10;    def start(self):&#10;        if not self.running:&#10;            # Lên lịch chạy hàng ngày vào các thời điểm: 8h sáng, 12h trưa, 16h chiều, 20h tối&#10;            self.scheduler.add_job(&#10;                self._fetch_and_update_data,&#10;                CronTrigger(hour='8,12,16,20'),&#10;                id='fetch_gold_price_scheduled',&#10;                name='Tự động cào dữ liệu giá vàng theo lịch'&#10;            )&#10;&#10;            # Thêm job chạy ngay khi khởi động ứng dụng&#10;            self.scheduler.add_job(&#10;                self._fetch_and_update_data,&#10;                id='fetch_gold_price_startup',&#10;                name='Cào dữ liệu giá vàng khi khởi động'&#10;            )&#10;&#10;            self.scheduler.start()&#10;            self.running = True&#10;            logger.info(&quot;Scheduler đã được khởi động thành công&quot;)&#10;&#10;    def stop(self):&#10;        if self.running:&#10;            self.scheduler.shutdown()&#10;            self.running = False&#10;            logger.info(&quot;Scheduler đã dừng&quot;)&#10;&#10;    def _fetch_and_update_data(self):&#10;        try:&#10;            logger.info(&quot;Bắt đầu cào dữ liệu giá vàng...&quot;)&#10;            global current_gold_data&#10;            data = self.crawl_function()&#10;            current_gold_data = data&#10;            self.update_function(data)&#10;            logger.info(f&quot;Đã cập nhật thành công dữ liệu giá vàng. Số bản ghi: {len(data)}&quot;)&#10;        except Exception as e:&#10;            logger.error(f&quot;Lỗi khi cập nhật dữ liệu giá vàng: {str(e)}&quot;)&#10;&#10;def make_session(retries=3, backoff_factor=0.3, status_forcelist=(500,502,504)):&#10;    s = requests.Session()&#10;    retry = Retry(total=retries, backoff_factor=backoff_factor,&#10;                  status_forcelist=status_forcelist,&#10;                  allowed_methods=frozenset(['GET','POST']))&#10;    adapter = HTTPAdapter(max_retries=retry)&#10;    s.mount(&quot;https://&quot;, adapter)&#10;    s.mount(&quot;http://&quot;, adapter)&#10;    return s&#10;&#10;def parse_price_from_text(text):&#10;    if not text:&#10;        return None&#10;    m = re.search(r'[\d\.]+', text)&#10;    if not m:&#10;        return None&#10;    s = m.group(0).replace('.', '')   # &quot;133.100&quot; -&gt; &quot;133100&quot;&#10;    try:&#10;        return float(s) * 1000&#10;    except:&#10;        return None&#10;&#10;def crawl_btmc(debug=False):&#10;    url = &quot;https://giavang.org/trong-nuoc/bao-tin-minh-chau/&quot;&#10;    headers = {&#10;        &quot;User-Agent&quot;: (&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &quot;&#10;                       &quot;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0 Safari/537.36&quot;)&#10;    }&#10;&#10;    sess = make_session()&#10;    resp = sess.get(url, headers=headers, timeout=15)&#10;    resp.raise_for_status()&#10;    soup = BeautifulSoup(resp.text, &quot;html.parser&quot;)&#10;&#10;    results = []&#10;&#10;    boxes = soup.select(&quot;div.gold-price-box&quot;)&#10;&#10;    for bi, box in enumerate(boxes, start=1):&#10;        rows = box.select(&quot;div.row&quot;)&#10;        for ri, row in enumerate(rows, start=1):&#10;            if ri == 1:&#10;                gold_type = &quot;Giá vàng Miếng&quot;&#10;            else:&#10;                gold_type = &quot;Giá vàng Nhẫn&quot;&#10;&#10;            cols = row.select(&quot;div.col-6&quot;)&#10;            if len(cols) &lt; 1:&#10;                continue&#10;&#10;            buy_price = None&#10;            sell_price = None&#10;&#10;            for ci, col in enumerate(cols, start=1):&#10;                label_tag = col.select_one(&quot;span.gold-price-label&quot;)&#10;                price_tag = col.select_one(&quot;span.gold-price&quot;)&#10;&#10;                label_text = label_tag.get_text(strip=True) if label_tag else f&quot;col_{ci}&quot;&#10;                raw_price_text = price_tag.get_text(&quot; &quot;, strip=True) if price_tag else &quot;&quot;&#10;                parsed_price = parse_price_from_text(raw_price_text)&#10;&#10;                ulabel = label_text.upper()&#10;                if &quot;MUA&quot; in ulabel:&#10;                    buy_price = parsed_price&#10;                elif &quot;BÁN&quot; in ulabel or &quot;BAN&quot; in ulabel:&#10;                    sell_price = parsed_price&#10;                else:&#10;                    if ci == 1:&#10;                        buy_price = parsed_price&#10;                    elif ci == 2:&#10;                        sell_price = parsed_price&#10;&#10;            if buy_price is not None or sell_price is not None:&#10;                now = datetime.now()&#10;                formatted_time = now.strftime(&quot;%d/%m/%Y %H:%M:%S&quot;)&#10;                record = {&#10;                    &quot;dealer&quot;: &quot;BTMC&quot;,&#10;                    &quot;type&quot;: gold_type,&#10;                    &quot;time&quot;: formatted_time,&#10;                    &quot;timestamp&quot;: now.timestamp(),&#10;                    &quot;Mua vào&quot;: buy_price,&#10;                    &quot;Bán ra&quot;: sell_price&#10;                }&#10;                results.append(record)&#10;&#10;    return results&#10;&#10;def load_history():&#10;    if not os.path.exists(HISTORY_FILE):&#10;        return []&#10;    with open(HISTORY_FILE, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#10;        try:&#10;            history = json.load(f)&#10;        except Exception:&#10;            history = []&#10;    cutoff = datetime.now() - timedelta(days=HISTORY_DAYS)&#10;    filtered = [item for item in history if item.get(&quot;timestamp&quot;, 0) &gt;= cutoff.timestamp()]&#10;    return filtered&#10;&#10;def save_history(history):&#10;    with open(HISTORY_FILE, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#10;        json.dump(history, f, ensure_ascii=False, indent=2)&#10;&#10;def update_history(new_data):&#10;    history = load_history()&#10;    for item in new_data:&#10;        similar = [h for h in history if h[&quot;type&quot;] == item[&quot;type&quot;]]&#10;        if not similar or abs(item[&quot;timestamp&quot;] - similar[-1][&quot;timestamp&quot;]) &gt; 60:&#10;            history.append(item)&#10;    cutoff = datetime.now() - timedelta(days=HISTORY_DAYS)&#10;    history = [item for item in history if item.get(&quot;timestamp&quot;, 0) &gt;= cutoff.timestamp()]&#10;    save_history(history)&#10;    return history&#10;&#10;def get_price_trend(current, history, key):&#10;    prev = None&#10;    for item in reversed(history):&#10;        if item[&quot;type&quot;] == current[&quot;type&quot;] and item != current:&#10;            prev = item&#10;            break&#10;    if prev is None or prev[key] is None or current[key] is None:&#10;        return {&quot;symbol&quot;: &quot;▬&quot;, &quot;percent&quot;: 0}&#10;&#10;    if current[key] &gt; prev[key]:&#10;        percent = ((current[key] - prev[key]) / prev[key]) * 100&#10;        return {&quot;symbol&quot;: &quot;▲&quot;, &quot;percent&quot;: round(percent, 2)}&#10;    elif current[key] &lt; prev[key]:&#10;        percent = ((prev[key] - current[key]) / prev[key]) * 100&#10;        return {&quot;symbol&quot;: &quot;▼&quot;, &quot;percent&quot;: round(percent, 2)}&#10;    else:&#10;        return {&quot;symbol&quot;: &quot;▬&quot;, &quot;percent&quot;: 0}&#10;&#10;app = Flask(__name__, static_url_path='/static')&#10;&#10;HTML_TEMPLATE = &quot;&quot;&quot;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Giá vàng Bảo Tín Minh Châu&lt;/title&gt;&#10;    &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ url_for('static', filename='styles.css') }}&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;navbar&quot;&gt;&#10;        &lt;h1&gt;Giá vàng Bảo Tín Minh Châu&lt;/h1&gt;&#10;        &lt;div class=&quot;nav-actions&quot;&gt;&#10;            &lt;span id=&quot;status&quot; class=&quot;status&quot;&gt;Dữ liệu đã cập nhật&lt;/span&gt;&#10;            &lt;button id=&quot;refresh&quot; class=&quot;refresh&quot; onclick=&quot;refreshData()&quot;&gt;&#10;                &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;16&quot; height=&quot;16&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 16 16&quot;&gt;&#10;                    &lt;path d=&quot;M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z&quot;/&gt;&#10;                    &lt;path d=&quot;M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z&quot;/&gt;&#10;                &lt;/svg&gt;&#10;                Làm mới&#10;            &lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;card&quot;&gt;&#10;            &lt;div class=&quot;card-header&quot;&gt;&#10;                &lt;h2&gt;Bảng giá vàng hiện tại&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;table&gt;&#10;                    &lt;thead&gt;&#10;                        &lt;tr&gt;&#10;                            &lt;th style=&quot;width: 35%; text-align: left;&quot;&gt;Loại vàng&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 25%; text-align: right;&quot; class=&quot;price-header&quot;&gt;Mua vào&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 25%; text-align: right;&quot; class=&quot;price-header&quot;&gt;Bán ra&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 15%; text-align: center;&quot;&gt;Thời gian&lt;/th&gt;&#10;                        &lt;/tr&gt;&#10;                    &lt;/thead&gt;&#10;                    &lt;tbody&gt;&#10;                        {% for item in data %}&#10;                        &lt;tr&gt;&#10;                            &lt;td style=&quot;text-align: left;&quot;&gt;&#10;                                &lt;div class=&quot;gold-type&quot;&gt;&#10;                                    {% if item['type'] == &quot;Giá vàng Miếng&quot; %}&#10;                                    &lt;svg class=&quot;gold-icon&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot;&gt;&#10;                                        &lt;path d=&quot;M12 4L4 8l8 4 8-4-8-4z&quot; fill=&quot;#E6A817&quot;/&gt;&#10;                                        &lt;path d=&quot;M4 12l8 4 8-4M4 16l8 4 8-4&quot; fill=&quot;#E6A817&quot;/&gt;&#10;                                    &lt;/svg&gt;&#10;                                    &lt;span class=&quot;gold-bar&quot;&gt;{{ item['type'] }}&lt;/span&gt;&#10;                                    {% else %}&#10;                                    &lt;svg class=&quot;gold-icon&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot;&gt;&#10;                                        &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;8&quot; fill=&quot;none&quot; stroke=&quot;#9C6644&quot; stroke-width=&quot;2&quot;/&gt;&#10;                                        &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;4&quot; fill=&quot;#9C6644&quot;/&gt;&#10;                                    &lt;/svg&gt;&#10;                                    &lt;span class=&quot;gold-ring&quot;&gt;{{ item['type'] }}&lt;/span&gt;&#10;                                    {% endif %}&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;price&quot; style=&quot;text-align: right;&quot;&gt;&#10;                                &lt;div class=&quot;price-cell&quot;&gt;&#10;                                    &lt;div class=&quot;price-value&quot;&gt;{{ &quot;{:,.0f}&quot;.format(item['Mua vào']) if item['Mua vào'] else &quot;N/A&quot; }}&lt;/div&gt;&#10;                                    &lt;span class=&quot;trend {% if trends[item['type']]['buy']['symbol'] == '▲' %}trend-up{% elif trends[item['type']]['buy']['symbol'] == '▼' %}trend-down{% else %}trend-same{% endif %}&quot;&gt;&#10;                                        {{ trends[item['type']]['buy']['symbol'] }}&#10;                                        {% if trends[item['type']]['buy']['percent'] != 0 %}&#10;                                        &lt;span class=&quot;percent&quot;&gt;({{ trends[item['type']]['buy']['percent'] }}%)&lt;/span&gt;&#10;                                        {% endif %}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;price&quot; style=&quot;text-align: right;&quot;&gt;&#10;                                &lt;div class=&quot;price-cell&quot;&gt;&#10;                                    &lt;div class=&quot;price-value&quot;&gt;{{ &quot;{:,.0f}&quot;.format(item['Bán ra']) if item['Bán ra'] else &quot;N/A&quot; }}&lt;/div&gt;&#10;                                    &lt;span class=&quot;trend {% if trends[item['type']]['sell']['symbol'] == '▲' %}trend-up{% elif trends[item['type']]['sell']['symbol'] == '▼' %}trend-down{% else %}trend-same{% endif %}&quot;&gt;&#10;                                        {{ trends[item['type']]['sell']['symbol'] }}&#10;                                        {% if trends[item['type']]['sell']['percent'] != 0 %}&#10;                                        &lt;span class=&quot;percent&quot;&gt;({{ trends[item['type']]['sell']['percent'] }}%)&lt;/span&gt;&#10;                                        {% endif %}&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td style=&quot;text-align: center;&quot;&gt;{{ item['time'].split(' ')[1] }}&lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        {% endfor %}&#10;                    &lt;/tbody&gt;&#10;                &lt;/table&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;card&quot;&gt;&#10;            &lt;div class=&quot;card-header&quot;&gt;&#10;                &lt;h2&gt;Lịch sử giá vàng 7 ngày gần nhất&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-body&quot;&gt;&#10;                &lt;table&gt;&#10;                    &lt;thead&gt;&#10;                        &lt;tr&gt;&#10;                            &lt;th style=&quot;width: 22%; text-align: left;&quot;&gt;Thời gian&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 28%; text-align: left;&quot;&gt;Loại vàng&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 25%; text-align: right;&quot; class=&quot;price-header&quot;&gt;Mua vào&lt;/th&gt;&#10;                            &lt;th style=&quot;width: 25%; text-align: right;&quot; class=&quot;price-header&quot;&gt;Bán ra&lt;/th&gt;&#10;                        &lt;/tr&gt;&#10;                    &lt;/thead&gt;&#10;                    &lt;tbody&gt;&#10;                        {% for item in history %}&#10;                        &lt;tr&gt;&#10;                            &lt;td style=&quot;text-align: left;&quot;&gt;{{ item['time'] }}&lt;/td&gt;&#10;                            &lt;td style=&quot;text-align: left;&quot;&gt;&#10;                                &lt;div class=&quot;gold-type&quot;&gt;&#10;                                    {% if item['type'] == &quot;Giá vàng Miếng&quot; %}&#10;                                    &lt;svg class=&quot;gold-icon&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot;&gt;&#10;                                        &lt;path d=&quot;M12 4L4 8l8 4 8-4-8-4z&quot; fill=&quot;#E6A817&quot;/&gt;&#10;                                        &lt;path d=&quot;M4 12l8 4 8-4M4 16l8 4 8-4&quot; fill=&quot;#E6A817&quot;/&gt;&#10;                                    &lt;/svg&gt;&#10;                                    &lt;span class=&quot;gold-bar&quot;&gt;{{ item['type'] }}&lt;/span&gt;&#10;                                    {% else %}&#10;                                    &lt;svg class=&quot;gold-icon&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;currentColor&quot;&gt;&#10;                                        &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;8&quot; fill=&quot;none&quot; stroke=&quot;#9C6644&quot; stroke-width=&quot;2&quot;/&gt;&#10;                                        &lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;4&quot; fill=&quot;#9C6644&quot;/&gt;&#10;                                    &lt;/svg&gt;&#10;                                    &lt;span class=&quot;gold-ring&quot;&gt;{{ item['type'] }}&lt;/span&gt;&#10;                                    {% endif %}&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;price&quot; style=&quot;text-align: right; padding-right: 12px;&quot;&gt;&#10;                                &lt;div class=&quot;price-cell&quot;&gt;&#10;                                    &lt;div class=&quot;price-value&quot; style=&quot;min-width: 100px;&quot;&gt;{{ &quot;{:,.0f}&quot;.format(item['Mua vào']) if item['Mua vào'] else &quot;N/A&quot; }}&lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                            &lt;td class=&quot;price&quot; style=&quot;text-align: right; padding-right: 12px;&quot;&gt;&#10;                                &lt;div class=&quot;price-cell&quot;&gt;&#10;                                    &lt;div class=&quot;price-value&quot; style=&quot;min-width: 100px;&quot;&gt;{{ &quot;{:,.0f}&quot;.format(item['Bán ra']) if item['Bán ra'] else &quot;N/A&quot; }}&lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/td&gt;&#10;                        &lt;/tr&gt;&#10;                        {% endfor %}&#10;                    &lt;/tbody&gt;&#10;                &lt;/table&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;p class=&quot;timestamp&quot;&gt;Cập nhật lần cuối: {{ data[0]['time'] if data else &quot;N/A&quot; }}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        function refreshData() {&#10;            document.getElementById('status').textContent = 'Đang cập nhật...';&#10;            fetch(window.location.href)&#10;                .then(response =&gt; response.text())&#10;                .then(html =&gt; {&#10;                    const parser = new DOMParser();&#10;                    const newDoc = parser.parseFromString(html, 'text/html');&#10;&#10;                    document.querySelector('.container').innerHTML = newDoc.querySelector('.container').innerHTML;&#10;                    document.getElementById('status').textContent = 'Dữ liệu đã cập nhật';&#10;&#10;                    // Highlight new data&#10;                    document.querySelectorAll('tr').forEach(row =&gt; {&#10;                        row.classList.add('highlight');&#10;                    });&#10;                })&#10;                .catch(error =&gt; {&#10;                    console.error('Error:', error);&#10;                    document.getElementById('status').textContent = 'Lỗi khi cập nhật';&#10;                });&#10;        }&#10;    &lt;/script&gt;&#10;&#10;    &lt;footer&gt;&#10;        &lt;p&gt;&amp;copy; 2025 website được code bởi Newbie và được dùng chỉ cho mục đích cá nhân vui lòng không thương mại hoá&lt;/a&gt;&lt;/p&gt;&#10;    &lt;/footer&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;&quot;&quot;&quot;&#10;&#10;@app.route('/')&#10;def index():&#10;    try:&#10;        # Sử dụng biến toàn cục hoặc lấy dữ liệu mới&#10;        global current_gold_data&#10;        data = current_gold_data&#10;&#10;        # Nếu chưa có dữ liệu (lần đầu chạy), thì thực hiện cào dữ liệu&#10;        if not data:&#10;            data = crawl_btmc()&#10;            current_gold_data = data&#10;&#10;        # Lấy lịch sử giá vàng&#10;        history = load_history()&#10;&#10;        # Tạo từ điển xu hướng giá cho từng loại vàng&#10;        trends = {}&#10;        for item in data:&#10;            if item[&quot;type&quot;] not in trends:&#10;                trends[item[&quot;type&quot;]] = {&quot;buy&quot;: {&quot;symbol&quot;: &quot;▬&quot;, &quot;percent&quot;: 0}, &quot;sell&quot;: {&quot;symbol&quot;: &quot;▬&quot;, &quot;percent&quot;: 0}}&#10;            trends[item[&quot;type&quot;]][&quot;buy&quot;] = get_price_trend(item, history, &quot;Mua vào&quot;)&#10;            trends[item[&quot;type&quot;]][&quot;sell&quot;] = get_price_trend(item, history, &quot;Bán ra&quot;)&#10;&#10;        return render_template_string(HTML_TEMPLATE, data=data, history=history, trends=trends)&#10;    except Exception as e:&#10;        logger.error(f&quot;Lỗi khi hiển thị trang: {str(e)}&quot;)&#10;        return f&quot;Lỗi: {str(e)}&quot;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    # Khởi tạo và bắt đầu scheduler&#10;    scheduler = GoldPriceScheduler(crawl_btmc, update_history)&#10;    scheduler.start()&#10;&#10;    try:&#10;        app.run(debug=True)&#10;    finally:&#10;        # Dừng scheduler khi tắt ứng dụng&#10;        scheduler.stop()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>